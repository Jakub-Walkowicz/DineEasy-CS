@page "/tables"
@using DineEasy.SharedKernel.Models.Table
@using DineEasy.Application.DTOs.Table
@using DineEasy.BlazorServer.Services
@rendermode InteractiveServer
@using Radzen
@using Radzen.Blazor
@inject ITableApiClient TableApiClient
@inject AuthStateService AuthStateService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService

<PageTitle>Zarządzanie stolikami</PageTitle>

<div class="container-fluid mt-3">
    @if (!initialized)
    {
        <div class="text-center mt-5">
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            <p class="mt-2">Ładowanie danych użytkownika...</p>
        </div>
    }
    else if (!AuthStateService.IsAuthenticated || !AuthStateService.IsAdmin)
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Variant="Variant.Flat" Shade="Shade.Lighter">
            <p>Musisz być zalogowany jako administrator, aby zarządzać stolikami.</p>
            <RadzenButton Text="Zaloguj się" ButtonStyle="ButtonStyle.Primary" Click="@(() => NavigationManager.NavigateTo("/login"))" />
        </RadzenAlert>
    }
    else
    {
        <RadzenRow Gap="2rem">
            <RadzenColumn Size="8">
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H1">Stoliki w restauracji</RadzenText>

                    @if (isLoading)
                    {
                        <div class="text-center my-4">
                            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                        </div>
                    }
                    else
                    {
                        <RadzenDataGrid @ref="tablesGrid" Data="@tables" TItem="TableDto"
                                        AllowFiltering="true" AllowSorting="true" AllowPaging="true"
                                        PageSize="10" PagerHorizontalAlign="HorizontalAlign.Left"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                            <Columns>
                                <RadzenDataGridColumn TItem="TableDto" Property="TableNumber" Title="Numer stolika" Width="120px">
                                    <Template Context="table">
                                        <RadzenBadge BadgeStyle="BadgeStyle.Primary" Text="@($"Stolik {table.TableNumber}")" />
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="TableDto" Property="Capacity" Title="Pojemność" Width="100px">
                                    <Template Context="table">
                                        <RadzenIcon Icon="group" /> @table.Capacity osób
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="TableDto" Property="IsActive" Title="Status" Width="120px">
                                    <Template Context="table">
                                        @if (table.IsActive)
                                        {
                                            <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="Aktywny" />
                                        }
                                        else
                                        {
                                            <RadzenBadge BadgeStyle="BadgeStyle.Danger" Text="Nieaktywny" />
                                        }
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="TableDto" Title="Akcje" Width="200px" Sortable="false" Filterable="false">
                                    <Template Context="table">
                                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                                                      Size="ButtonSize.Small" Text="Edytuj"
                                                      Click="@(() => EditTable(table))" class="me-1" />
                                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat"
                                                      Size="ButtonSize.Small" Text="Usuń"
                                                      Click="@(() => DeleteTable(table.Id))" />
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    }
                </RadzenCard>
            </RadzenColumn>

            <RadzenColumn Size="4">
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H2">
                        @(isEditing ? "Edytuj stolik" : "Dodaj nowy stolik")
                    </RadzenText>

                    <RadzenTemplateForm TItem="CreateTableDto" Data="@tableDto" Submit="@HandleSubmit">
                        <RadzenRow Gap="1rem">
                            <RadzenColumn Size="12">
                                <RadzenLabel Text="Numer stolika" />
                                <RadzenNumeric @bind-Value="@tableDto.TableNumber" Min="1" Max="999"
                                               ShowUpDown="true" class="w-100" Name="TableNumber" />
                                <RadzenRequiredValidator Component="TableNumber" Text="Numer stolika jest wymagany" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow Gap="1rem" class="mt-3">
                            <RadzenColumn Size="12">
                                <RadzenLabel Text="Pojemność (liczba osób)" />
                                <RadzenNumeric @bind-Value="@tableDto.Capacity" Min="1" Max="20"
                                               ShowUpDown="true" class="w-100" Name="Capacity" />
                                <RadzenRequiredValidator Component="Capacity" Text="Pojemność jest wymagana" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow Gap="1rem" class="mt-3">
                            <RadzenColumn Size="12">
                                <RadzenCheckBox @bind-Value="@tableDto.IsActive" Name="IsActive" />
                                <RadzenLabel Text="Stolik aktywny" Component="IsActive" class="ms-2" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow Gap="1rem" class="mt-4">
                            <RadzenColumn Size="6">
                                <RadzenButton ButtonType="ButtonType.Submit"
                                              Icon="@(isEditing ? "save" : "add")"
                                              Text="@(isEditing ? "Zapisz" : "Dodaj")"
                                              ButtonStyle="ButtonStyle.Primary"
                                              class="w-100"
                                              IsBusy="@isSubmitting" />
                            </RadzenColumn>
                            @if (isEditing)
                            {
                                <RadzenColumn Size="6">
                                    <RadzenButton Text="Anuluj" Icon="cancel"
                                                  ButtonStyle="ButtonStyle.Light"
                                                  class="w-100"
                                                  Click="@CancelEdit" />
                                </RadzenColumn>
                            }
                        </RadzenRow>
                    </RadzenTemplateForm>
                </RadzenCard>

                <RadzenCard class="mt-3">
                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3">Statystyki</RadzenText>
                    <RadzenRow Gap="1rem" class="mt-2">
                        <RadzenColumn Size="6">
                            <RadzenCard Variant="Variant.Filled" class="text-center">
                                <RadzenText TextStyle="TextStyle.H5" class="mb-0">@tables.Count</RadzenText>
                                <RadzenText TextStyle="TextStyle.Caption">Wszystkich stolików</RadzenText>
                            </RadzenCard>
                        </RadzenColumn>
                        <RadzenColumn Size="6">
                            <RadzenCard Variant="Variant.Filled" class="text-center">
                                <RadzenText TextStyle="TextStyle.H5" class="mb-0">@tables.Where(t => t.IsActive).Count()</RadzenText>
                                <RadzenText TextStyle="TextStyle.Caption">Aktywnych</RadzenText>
                            </RadzenCard>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>
    }
</div>

@code {
    private List<TableDto> tables = new();
    private CreateTableDto tableDto = new();
    private UpdateTableDto updateTableDto = new();
    private bool isSubmitting = false;
    private bool isLoading = false;
    private bool isEditing = false;
    private bool initialized = false;
    private RadzenDataGrid<TableDto> tablesGrid;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AuthStateService.InitializeAsync();

            if (AuthStateService.IsAuthenticated && AuthStateService.IsAdmin)
            {
                await LoadTables();
            }

            initialized = true;
            StateHasChanged();
        }
    }

    private async Task LoadTables()
    {
        isLoading = true;
        try
        {
            var result = await TableApiClient.GetAllTablesAsync();
            tables = result.ToList();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Błąd",
                Detail = $"Nie udało się załadować stolików: {ex.Message}",
                Duration = 4000
            });
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        try
        {
            if (isEditing)
            {
                updateTableDto.Id = tableDto.Id;
                updateTableDto.TableNumber = tableDto.TableNumber;
                updateTableDto.Capacity = tableDto.Capacity;
                updateTableDto.IsActive = tableDto.IsActive;

                var success = await TableApiClient.UpdateTableAsync(updateTableDto.Id, updateTableDto);
                if (success)
                {
                    NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Sukces",
                        Detail = "Stolik został zaktualizowany pomyślnie!",
                        Duration = 3000
                    });
                    CancelEdit();
                    await LoadTables();
                }
            }
            else
            {
                var result = await TableApiClient.CreateTableAsync(tableDto);
                if (result != null)
                {
                    NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Sukces",
                        Detail = "Stolik został dodany pomyślnie!",
                        Duration = 3000
                    });
                    tableDto = new CreateTableDto { IsActive = true };
                    await LoadTables();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Błąd",
                Detail = $"Wystąpił błąd: {ex.Message}",
                Duration = 4000
            });
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void EditTable(TableDto table)
    {
        isEditing = true;
        tableDto = new CreateTableDto
        {
            Id = table.Id,
            TableNumber = table.TableNumber,
            Capacity = table.Capacity,
            IsActive = table.IsActive
        };
    }

    private void CancelEdit()
    {
        isEditing = false;
        tableDto = new CreateTableDto { IsActive = true };
    }

    private async Task DeleteTable(int tableId)
    {
        var confirmed = await DialogService.Confirm("Czy na pewno chcesz usunąć ten stolik?", "Potwierdzenie usunięcia",
            new ConfirmOptions { OkButtonText = "Tak", CancelButtonText = "Nie" });

        if (confirmed == true)
        {
            try
            {
                var success = await TableApiClient.DeleteTableAsync(tableId);
                if (success)
                {
                    NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Sukces",
                        Detail = "Stolik został usunięty pomyślnie!",
                        Duration = 3000
                    });
                    await LoadTables();
                }
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Błąd",
                    Detail = $"Nie udało się usunąć stolika: {ex.Message}",
                    Duration = 4000
                });
            }
        }
    }
}