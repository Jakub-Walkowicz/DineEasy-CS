// <auto-generated />
using System;
using DineEasy.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DineEasy.Infrastructure.Migrations
{
    [DbContext(typeof(DineEasyDbContext))]
    [Migration("20250622091441_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("DineEasy.Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartySize")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReservationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialRequests")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TableId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Reservations_UserId");

                    b.HasIndex("TableId", "ReservationDateTime")
                        .IsUnique()
                        .HasDatabaseName("IX_Reservations_TableId_DateTime");

                    b.ToTable("Reservations", null, t =>
                        {
                            t.HasCheckConstraint("CK_Reservation_Duration", "Duration > 0 AND Duration <= 5");

                            t.HasCheckConstraint("CK_Reservation_PartySize", "PartySize > 0 AND PartySize <= 20");
                        });
                });

            modelBuilder.Entity("DineEasy.Domain.Entities.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<int>("TableNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TableNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Tables_Number");

                    b.ToTable("Tables", null, t =>
                        {
                            t.HasCheckConstraint("CK_Table_Capacity", "Capacity > 0 AND Capacity <= 20");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 2,
                            IsActive = true,
                            TableNumber = 1
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 4,
                            IsActive = true,
                            TableNumber = 2
                        });
                });

            modelBuilder.Entity("DineEasy.Domain.Entities.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StartTime", "EndTime", "DayOfWeek")
                        .IsUnique()
                        .HasDatabaseName("IX_TimeSlots_StartTime_EndTime_DayOfWeek");

                    b.ToTable("TimeSlots", null, t =>
                        {
                            t.HasCheckConstraint("CK_TimeSlot_EndTimeAfterStartTime", "EndTime > StartTime");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayOfWeek = 1,
                            EndTime = new TimeOnly(22, 0, 0),
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            DayOfWeek = 2,
                            EndTime = new TimeOnly(22, 0, 0),
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            DayOfWeek = 3,
                            EndTime = new TimeOnly(22, 0, 0),
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            DayOfWeek = 4,
                            EndTime = new TimeOnly(22, 0, 0),
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            DayOfWeek = 5,
                            EndTime = new TimeOnly(22, 0, 0),
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            DayOfWeek = 6,
                            EndTime = new TimeOnly(22, 0, 0),
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            DayOfWeek = 0,
                            EndTime = new TimeOnly(22, 0, 0),
                            StartTime = new TimeOnly(10, 0, 0)
                        });
                });

            modelBuilder.Entity("DineEasy.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("User");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@dineeasy.com",
                            PasswordHash = "$2a$11$wGLrsYVaMad.ug1tyETgjet3wy4nkuRyGnZLrrNXXMRII7u5GJk0e",
                            Role = "Admin",
                            Username = "admin123123"
                        });
                });

            modelBuilder.Entity("DineEasy.Domain.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserProfiles_UserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FirstName = "Adam",
                            LastName = "Kowalski",
                            PhoneNumber = "0123456789",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("DineEasy.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("DineEasy.Domain.Entities.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DineEasy.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DineEasy.Domain.Entities.UserProfile", b =>
                {
                    b.HasOne("DineEasy.Domain.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("DineEasy.Domain.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DineEasy.Domain.Entities.User", b =>
                {
                    b.Navigation("UserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
